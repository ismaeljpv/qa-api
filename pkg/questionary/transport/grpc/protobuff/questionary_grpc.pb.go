// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionaryServiceClient is the client API for QuestionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionaryServiceClient interface {
	FindAll(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Questions, error)
	FindByUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Questions, error)
	FindByID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*QuestionInfo, error)
	Create(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Question, error)
	Update(ctx context.Context, in *QuestionUpdate, opts ...grpc.CallOption) (*QuestionInfo, error)
	AddAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*QuestionInfo, error)
	Delete(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GenericMessage, error)
}

type questionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionaryServiceClient(cc grpc.ClientConnInterface) QuestionaryServiceClient {
	return &questionaryServiceClient{cc}
}

func (c *questionaryServiceClient) FindAll(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Questions, error) {
	out := new(Questions)
	err := c.cc.Invoke(ctx, "/QuestionaryService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) FindByUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Questions, error) {
	out := new(Questions)
	err := c.cc.Invoke(ctx, "/QuestionaryService/FindByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) FindByID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*QuestionInfo, error) {
	out := new(QuestionInfo)
	err := c.cc.Invoke(ctx, "/QuestionaryService/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) Create(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/QuestionaryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) Update(ctx context.Context, in *QuestionUpdate, opts ...grpc.CallOption) (*QuestionInfo, error) {
	out := new(QuestionInfo)
	err := c.cc.Invoke(ctx, "/QuestionaryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) AddAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*QuestionInfo, error) {
	out := new(QuestionInfo)
	err := c.cc.Invoke(ctx, "/QuestionaryService/AddAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionaryServiceClient) Delete(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GenericMessage, error) {
	out := new(GenericMessage)
	err := c.cc.Invoke(ctx, "/QuestionaryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionaryServiceServer is the server API for QuestionaryService service.
// All implementations must embed UnimplementedQuestionaryServiceServer
// for forward compatibility
type QuestionaryServiceServer interface {
	FindAll(context.Context, *EmptyMessage) (*Questions, error)
	FindByUser(context.Context, *wrapperspb.StringValue) (*Questions, error)
	FindByID(context.Context, *wrapperspb.StringValue) (*QuestionInfo, error)
	Create(context.Context, *Question) (*Question, error)
	Update(context.Context, *QuestionUpdate) (*QuestionInfo, error)
	AddAnswer(context.Context, *Answer) (*QuestionInfo, error)
	Delete(context.Context, *wrapperspb.StringValue) (*GenericMessage, error)
	mustEmbedUnimplementedQuestionaryServiceServer()
}

// UnimplementedQuestionaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionaryServiceServer struct {
}

func (UnimplementedQuestionaryServiceServer) FindAll(context.Context, *EmptyMessage) (*Questions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedQuestionaryServiceServer) FindByUser(context.Context, *wrapperspb.StringValue) (*Questions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUser not implemented")
}
func (UnimplementedQuestionaryServiceServer) FindByID(context.Context, *wrapperspb.StringValue) (*QuestionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedQuestionaryServiceServer) Create(context.Context, *Question) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQuestionaryServiceServer) Update(context.Context, *QuestionUpdate) (*QuestionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuestionaryServiceServer) AddAnswer(context.Context, *Answer) (*QuestionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswer not implemented")
}
func (UnimplementedQuestionaryServiceServer) Delete(context.Context, *wrapperspb.StringValue) (*GenericMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQuestionaryServiceServer) mustEmbedUnimplementedQuestionaryServiceServer() {}

// UnsafeQuestionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionaryServiceServer will
// result in compilation errors.
type UnsafeQuestionaryServiceServer interface {
	mustEmbedUnimplementedQuestionaryServiceServer()
}

func RegisterQuestionaryServiceServer(s grpc.ServiceRegistrar, srv QuestionaryServiceServer) {
	s.RegisterService(&QuestionaryService_ServiceDesc, srv)
}

func _QuestionaryService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).FindAll(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_FindByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).FindByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/FindByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).FindByUser(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).FindByID(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).Create(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).Update(ctx, req.(*QuestionUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_AddAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).AddAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/AddAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).AddAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionaryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionaryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionaryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionaryServiceServer).Delete(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionaryService_ServiceDesc is the grpc.ServiceDesc for QuestionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QuestionaryService",
	HandlerType: (*QuestionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _QuestionaryService_FindAll_Handler,
		},
		{
			MethodName: "FindByUser",
			Handler:    _QuestionaryService_FindByUser_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _QuestionaryService_FindByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _QuestionaryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QuestionaryService_Update_Handler,
		},
		{
			MethodName: "AddAnswer",
			Handler:    _QuestionaryService_AddAnswer_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _QuestionaryService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/questionary/transport/grpc/protobuff/questionary.proto",
}
